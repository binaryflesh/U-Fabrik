| package |
package := Package name: 'UML Paint'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '1.00'.


package classNames
	add: #UMLPaint;
	yourself.

package methodNames
	add: #UMLClassBrowserComposite -> #onChangedIn:;
	add: #UMLInstance -> #showClassDiagram;
	add: #UMLListComposite -> #showClassDiagram;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\..\..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\..\..\Core\Object Arts\Dolphin\MVP\Gdiplus\Gdiplus';
	add: 'UML Live Engine';
	add: 'UML Live Engine Views';
	yourself).

package!

"Class Definitions"!

Object subclass: #UMLPaint
	instanceVariableNames: 'umlClass bitmap'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!UMLClassBrowserComposite methodsFor!

onChangedIn: aSelectablePresenter
	| classDescription diagram |

	aSelectablePresenter hasSelection ifFalse: [self resetAttributesAndRelations. ^categoryBrowser model: OrderedCollection new].

	classDescription := self isClassSideSelected ifTrue: [aSelectablePresenter selection] ifFalse: [aSelectablePresenter selection getMetaclass].

	self setMethodsFor: classDescription.

	self resetSanityCheck.

	(Canvas forView: diagramPresenter view) erase.
	diagram := (UMLPaint on: classDescription) generate; yourself.
	diagramPresenter model: diagram bitmap! !
!UMLClassBrowserComposite categoriesFor: #onChangedIn:!class changed!public! !

!UMLInstance methodsFor!

showClassDiagram

	(UMLPaint on: umlClass) show.
	^self! !
!UMLInstance categoriesFor: #showClassDiagram!public! !

!UMLListComposite methodsFor!

showClassDiagram

	self selection showClassDiagram! !
!UMLListComposite categoriesFor: #showClassDiagram!public! !

"End of package definition"!

