"Filed out from Dolphin Smalltalk 7"!

DataBaseObject subclass: #BBDBAttribute
	instanceVariableNames: 'name type nullable table description'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
BBDBAttribute guid: (GUID fromString: '{fd493bc1-c15f-49c5-8ee0-0092004ff541}')!
BBDBAttribute comment: ''!
!BBDBAttribute categoriesForClass!Unclassified! !
!BBDBAttribute methodsFor!

description
	^description!

description: anObject
	description := anObject!

icon

	self isForeignKey ifTrue: [^nullable ifTrue: [BBDBForeignKey nullableIcon] ifFalse: [BBDBForeignKey icon] ].

	self isPrimaryKey ifFalse: [^self class icon].

	^self pkIcon!

initialize

	super initialize.

	name := ''.
	description := ''.
	nullable := false.
	type := BBDBAttributeType new.!

isBasic

	^(self isPrimaryKey or: [self isForeignKey]) not!

isForeignKey

	^table isForeignKey: self!

isPrimaryKey
	^table isPrimary: self!

name
	^name!

name: anObject
	name := anObject!

nullable
	^nullable!

nullable: anObject
	nullable := anObject!

pkIcon
	"Generated from:
	self createIconMethodOfSize: 32@32 fromFile: 'pk.png'.
	"
	^InternalIcon fromBytes: #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 6 0 0 0 115 122 122 244 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 4 103 65 77 65 0 0 177 143 11 252 97 5 0 0 0 32 99 72 82 77 0 0 122 38 0 0 128 132 0 0 250 0 0 0 128 232 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 112 156 186 81 60 0 0 6 102 73 68 65 84 88 71 205 150 233 83 84 87 26 198 157 127 40 95 103 190 36 149 74 170 146 74 42 33 53 97 50 137 162 66 52 70 9 19 9 171 129 128 32 155 54 40 184 209 64 139 236 208 208 44 218 200 38 75 99 219 54 139 236 184 32 65 12 8 184 85 16 141 26 232 245 55 231 220 219 221 177 17 44 18 99 37 167 234 173 62 247 246 189 247 125 206 243 62 239 242 15 196 218 244 87 46 9 224 175 92 155 188 206 221 110 55 184 192 45 204 165 110 21 19 91 229 215 33 204 46 247 226 57 249 236 171 154 215 239 154 0 28 78 7 54 251 138 234 94 2 19 38 65 217 156 46 92 46 215 43 59 87 14 235 89 126 0 164 19 185 150 30 254 76 75 67 53 55 70 251 184 118 217 202 228 149 17 86 150 151 113 58 221 194 94 19 0 73 173 67 33 28 238 206 205 16 189 115 11 251 195 66 136 219 189 141 164 200 48 58 154 26 177 47 219 148 255 95 149 254 53 25 144 0 108 30 0 67 214 46 130 62 122 135 192 119 254 201 129 189 95 114 32 98 55 223 237 220 198 213 225 126 149 34 193 132 91 48 33 227 226 150 246 7 52 241 66 8 84 6 224 233 211 37 142 166 39 8 135 91 72 137 14 35 45 226 107 186 234 74 209 106 146 40 205 61 162 74 82 81 166 84 234 159 8 192 75 203 244 196 21 98 190 218 194 15 187 183 115 56 62 92 48 176 3 179 81 207 228 104 47 249 135 211 120 246 228 145 2 94 40 65 181 63 112 250 117 69 40 63 60 96 110 103 199 71 111 179 243 131 183 208 68 135 162 77 253 158 242 19 26 10 179 211 41 211 102 243 248 209 162 7 128 211 11 65 101 243 55 97 251 20 254 188 35 223 205 85 27 95 22 168 95 93 193 100 172 34 252 243 15 8 13 120 155 216 224 64 180 233 113 156 206 78 83 194 209 106 40 229 206 252 172 42 3 167 205 99 14 37 51 156 78 167 146 162 27 49 167 203 233 131 225 7 192 110 123 74 67 249 73 146 191 217 76 198 183 65 196 132 252 155 132 208 237 156 76 141 39 106 215 54 50 226 35 233 108 49 50 208 107 97 242 218 56 131 189 151 152 184 58 198 173 91 183 152 154 154 98 118 118 150 7 15 30 176 184 184 168 216 125 177 191 119 255 62 119 239 222 101 126 126 158 159 102 102 152 186 121 147 177 177 49 230 230 230 20 16 126 0 86 86 30 83 169 211 144 26 190 149 34 77 44 17 91 63 38 42 248 63 20 106 146 201 78 218 199 161 132 88 114 210 83 168 41 62 77 89 190 22 99 85 5 3 151 44 140 14 13 51 52 48 200 196 245 235 220 89 184 195 146 112 254 179 116 188 176 192 130 112 52 251 211 12 147 19 147 140 12 15 99 234 50 81 83 165 199 108 54 191 8 96 249 215 199 24 138 52 68 237 252 20 109 90 156 96 34 136 184 93 255 229 120 124 132 16 100 52 97 187 130 137 9 11 229 72 114 18 57 169 41 66 148 153 20 29 61 193 169 163 90 78 229 21 80 89 92 66 67 69 37 103 244 122 26 132 85 23 151 81 174 43 166 88 91 72 209 73 29 186 99 185 20 158 200 39 59 61 11 131 190 230 69 0 54 17 130 182 90 45 145 59 2 217 183 59 152 232 237 159 16 43 246 229 89 169 212 228 31 227 168 38 141 186 202 114 6 44 102 172 166 14 90 206 212 210 215 109 230 98 199 5 186 58 58 49 155 76 52 84 85 209 220 80 199 101 235 37 76 109 237 52 213 159 163 182 194 64 113 94 33 154 148 116 146 227 18 57 113 248 24 227 34 12 126 33 144 34 182 187 237 244 117 213 113 60 53 154 232 175 183 138 16 4 112 50 37 134 139 198 106 242 52 7 208 29 207 226 154 136 185 92 203 191 62 225 151 199 139 56 29 118 69 128 14 97 242 27 115 179 146 238 171 220 22 191 215 174 92 101 100 104 148 94 235 101 106 13 245 100 102 30 70 47 78 254 112 113 73 41 94 126 0 100 93 145 183 38 71 45 228 29 73 34 232 147 119 73 12 221 66 165 54 147 242 188 44 146 69 22 124 19 242 5 67 67 106 53 116 184 133 234 61 213 64 185 246 232 122 97 225 54 253 162 127 92 23 32 198 198 199 105 19 44 244 244 244 211 210 118 30 77 214 17 154 90 90 253 18 209 39 66 89 80 100 219 189 55 59 65 113 238 65 190 218 252 49 123 62 123 143 204 196 72 178 51 226 153 24 179 162 217 31 67 175 200 0 213 161 218 59 60 205 210 7 96 94 244 17 115 119 7 221 93 29 88 46 92 196 212 110 162 233 92 43 173 2 64 174 54 31 147 8 217 243 203 15 128 236 247 43 203 75 180 212 151 18 181 39 136 128 55 223 32 56 240 67 82 147 163 48 84 104 57 20 183 151 91 83 55 148 247 189 149 80 246 2 68 90 123 59 233 237 153 105 26 107 107 176 116 118 210 221 214 129 169 165 131 230 179 205 156 61 99 164 32 95 39 178 160 123 125 0 54 79 53 155 190 49 194 177 131 9 124 254 254 191 216 19 20 192 255 118 109 230 203 205 1 148 230 101 139 38 36 97 254 214 17 21 207 207 1 184 47 242 189 177 198 64 83 93 61 214 174 11 10 128 158 110 11 85 165 21 148 156 42 98 250 199 155 107 3 144 162 240 158 194 237 178 83 87 174 35 60 36 144 164 189 33 132 110 251 148 156 67 41 220 187 51 239 231 92 157 162 84 83 37 40 66 56 51 39 78 220 72 231 249 118 250 172 61 180 53 183 208 43 66 113 222 216 68 189 16 224 180 40 88 107 134 192 11 192 171 78 115 103 51 141 213 37 76 142 247 115 101 184 143 71 98 72 81 154 224 170 246 171 116 68 69 63 42 128 235 35 227 20 230 230 81 95 109 224 92 195 25 206 10 38 42 138 74 40 16 245 226 135 216 125 34 35 172 27 0 32 24 120 38 82 108 229 217 19 191 135 87 28 78 165 238 75 229 121 103 128 213 0 70 250 6 41 45 208 97 172 173 21 53 163 82 0 209 83 34 174 243 114 142 11 0 223 211 223 211 187 62 0 223 71 221 50 169 100 78 248 15 165 82 35 171 219 175 55 4 94 6 6 172 125 228 231 228 208 92 103 160 181 161 158 178 130 124 81 13 79 81 166 59 205 254 184 120 250 122 122 94 6 192 127 222 19 131 143 146 94 178 119 121 109 245 244 227 27 76 60 33 24 176 244 16 31 190 23 109 150 70 8 57 131 132 200 112 14 38 38 146 153 146 65 68 216 183 12 15 14 174 15 64 206 228 94 7 138 184 125 26 147 148 171 51 251 90 0 228 61 175 8 23 239 61 224 178 229 162 80 126 39 23 218 219 104 63 119 22 99 77 53 250 226 82 106 43 245 60 90 124 184 113 6 158 119 166 6 99 253 249 207 37 192 41 35 187 50 182 139 189 40 205 202 140 32 203 180 221 142 205 102 195 225 16 165 203 51 51 120 81 248 141 229 47 27 46 189 47 108 100 0 245 59 226 170 11 159 206 60 247 95 11 128 223 3 242 239 3 224 101 180 189 206 255 54 109 132 174 215 249 204 255 1 182 246 33 27 197 225 157 208 0 0 0 0 73 69 78 68 174 66 96 130]!

printNullable

	^nullable printString!

printOn: aStream
	"Append the ASCII representation of the receiver
	 to aStream."

	super printOn: aStream.

	aStream
		nextPutAll: ' - ', name, ' [', self printType, ']'.
!

printType

	^type printType!

table
	^table!

table: anObject
	table := anObject!

tableName

	^table name!

type
	^type!

type: anObject
	type := anObject!

typeMatchWith: aString
	"Answer whether or not the receiver <type> match <aString>"

	^aString match: type value! !
!BBDBAttribute categoriesFor: #description!accessing!private! !
!BBDBAttribute categoriesFor: #description:!accessing!private! !
!BBDBAttribute categoriesFor: #icon!public! !
!BBDBAttribute categoriesFor: #initialize!public! !
!BBDBAttribute categoriesFor: #isBasic!public! !
!BBDBAttribute categoriesFor: #isForeignKey!public! !
!BBDBAttribute categoriesFor: #isPrimaryKey!public! !
!BBDBAttribute categoriesFor: #name!accessing!private! !
!BBDBAttribute categoriesFor: #name:!accessing!private! !
!BBDBAttribute categoriesFor: #nullable!accessing!private! !
!BBDBAttribute categoriesFor: #nullable:!accessing!private! !
!BBDBAttribute categoriesFor: #pkIcon!public! !
!BBDBAttribute categoriesFor: #printNullable!public! !
!BBDBAttribute categoriesFor: #printOn:!public! !
!BBDBAttribute categoriesFor: #printType!public! !
!BBDBAttribute categoriesFor: #table!accessing!private! !
!BBDBAttribute categoriesFor: #table:!accessing!private! !
!BBDBAttribute categoriesFor: #tableName!public! !
!BBDBAttribute categoriesFor: #type!accessing!private! !
!BBDBAttribute categoriesFor: #type:!accessing!private! !
!BBDBAttribute categoriesFor: #typeMatchWith:!public! !

!BBDBAttribute class methodsFor!

icon

	^Icon fromId: 'ListViewColumn.ico'!

newNamed: aString

	^super new initialize
		name: aString;
		yourself.!

newNamed: aString for: aBBDBTable 

	^super new initialize
		name: aString;
		table: aBBDBTable;
		yourself.
! !
!BBDBAttribute class categoriesFor: #icon!public! !
!BBDBAttribute class categoriesFor: #newNamed:!public! !
!BBDBAttribute class categoriesFor: #newNamed:for:!public! !

